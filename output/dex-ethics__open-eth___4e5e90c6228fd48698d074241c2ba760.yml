# Sets up infrastructure where Nginx handles TLS and
# static content. Nginx proxies API requests to the
# server. The server is connected to a PostgreSQL
# database.
#
# see https://docs.docker.com/compose/compose-file/
#
version: '2'
services:
   len:
      image: recmo/docker-lets-encrypt-proxy
      restart: always
      ports:
        - "80:80"
        - "443:443"
      links:
        - web
      environment:
        - DOMAINS=^(|www\\.)openeth\\.com$$
        - ORIGIN_HOST=web
        - ORIGIN_PORT=80
      volumes:
        - ./cache:/cache:rw
   web:
      image: nginx
      volumes:
         - ./www:/srv/www:ro
         - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
         - ./log/web:/var/log/nginx:rw
         - ./empty:/var/empty:ro
      links:
         - api
   api:
      image: begriffs/postgrest
      volumes:
         - ./log/api:/var/log:rw
      links:
         - dbm
      environment:
         POSTGREST_JWT_SECRET:     '${JWT_SECRET}'
         PG_ENV_POSTGRES_USER:     'authenticator'
         POSTGREST_ANONYMOUS:      'anonymous'
         PG_ENV_POSTGRES_PASSWORD: '${AUTHENTICATOR_PASSWORD}'
         PG_ENV_POSTGRES_DB:       'db'
         PG_PORT_5432_TCP_ADDR:    'dbm'
         PG_PORT_5432_TCP_PORT:    '5432'
         POSTGREST_MAX_ROWS:       '1000000'
         POSTGREST_POOL:           '200'
   dbm:
      image: postgres:9.5
      volumes:
         - ./log/dbm:/var/log:rw
         - ./database:/docker-entrypoint-initdb.d:ro
         - ./data:/var/lib/postgresql/:rw
      environment:
         POSTGRES_DB:              'db'
         POSTGRES_USER:            'postgres'
         POSTGRES_PASSWORD:        '${POSTGRES_PASSWORD}'
         AUTHENTICATOR_PASSWORD:   '${AUTHENTICATOR_PASSWORD}'
