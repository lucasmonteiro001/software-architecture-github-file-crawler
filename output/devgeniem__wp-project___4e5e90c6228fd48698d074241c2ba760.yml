##
# Docker for Mac is super slow for the filesync, So we'll use unison instead
##
sync:
  image: devgeniem/bg-sync
  volumes:
    - .:/source
  volumes_from:
    - web
  environment:
    SYNC_DESTINATION: '/var/www/project'
    ##
    # NOTE: If sync is not working try to raise SYNC_MAX_INOTIFY_WATCHES
    # $ find . -type f | wc -l
    # 48122
    ##
    SYNC_MAX_INOTIFY_WATCHES: '40000'
    SYNC_VERBOSE: '0'
    SYNC_EXTRA_UNISON_PROFILE_OPTS: 'ignore = Name {.docker}'
  privileged: true

##
# This is used for running rspec tests included in ./tests/rspec/test.rb
##
browser-test:
  image: devgeniem/poltergeist
  volumes:
    - ${HOME}/.gdev/ca/ca.crt:/usr/local/share/ca-certificates/ca.crt:ro
    - ./tests:/tests
  environment:
    WP_TEST_URL: https://wordpress.test

    # Use these in local development and CI
    WP_TEST_USER: admin
    WP_TEST_USER_PASS: admin
  dns:
    - 10.254.254.254

##
# This container is used to run php codesniffer tests for the codebase
##
style-test:
  image: devgeniem/wordpress-project-builder
  volumes_from:
    - web
  command: /bin/false

##
# nodejs container which installs and builds all frontend assets in all all themes with package.json
##
webpack-builder:
  image: devgeniem/node-assets-builder
  volumes_from:
    - web
  command: find /var/www/project/web/app/themes/ -mindepth 1 -maxdepth 1 -type d -exec node_install_and_build_webpack {} \;

##
# Web Server which runs nginx+php
##
web:
  image: devgeniem/wordpress-development-server:debian-php7.0
  ports:
    - 8080
  links:
    - db
    - redis
    #- elasticsearch
  volumes:
    # Sync files into this path with sync container
    - /var/www/project

    # Use volume for xdebug trace and profiling so we can use analysing in other containers
    - /tmp/xdebug

    # In production uploads will be in /data/uploads/
    # This way let the container see them like in production
    - ./.docker/uploads:/var/www/uploads
  environment:
    # Small variable to tell if we are in production,testing or development
    # Don't use this in your code unless this is only option
    # We want to nearly identical codebase in production and development
    WP_ENV: development

    WEB_UID: 1000
    WEB_GID: 1001

    # Set php to use redis for object cache & sessions
    PHP_SESSION_HANDLER: redis
    PHP_SESSION_REDIS_DB: 0

    # This is the default theme name WordPress will use
    WP_DEFAULT_THEME: THEMENAME

    # Use same caching solution as in production but only for a really small time
    # Default value is 1 second
    NGINX_REDIS_CACHE_TTL_DEFAULT: "1"
    NGINX_REDIS_CACHE_TTL_MAX: "1"

    # These variables can be used in nginx templates like .htpasswd
    BASIC_AUTH_USER: hello
    BASIC_AUTH_PASSWORD_HASH: world

    # These will be mapped automatically in development to jwilder/nginx-proxy
    VIRTUAL_HOST: wordpress.test
    VIRTUAL_PORT: 8080

    # This creates https certificate automatically when using gdev
    HTTPS_HOST: wordpress.test

    # Set project WP_SITEURL & WP_HOME from SERVER_NAME too
    SERVER_NAME: wordpress.test

    # Mysql details
    MYSQL_DATABASE: wordpress
    MYSQL_USER: wordpress
    MYSQL_PWD: wordpress

    # Xdebug profiling is disabled because it slows down development
    # If you want to profile this site turn it on and use ?XDEBUG_PROFILE get parameter or cookie
    XDEBUG_ENABLE_PROFILE: 0
    # Connect to host machine for remote xdebug. The IP address is alias for host machine 127.0.0.1 by gdev
    XDEBUG_REMOTE_HOST: 10.254.254.254
    # Raise the Nginx fastcgi timeout so that we can have longer debug sessions
    # This also raises php_execution_time
    NGINX_FASTCGI_TIMEOUT: 600

    # Mail settings
    SMTP_FROM: no-reply@wordpress.test
    # This will use local mail.test server
    SMTP_HOST: 172.17.0.1

##
# Use basic Mariadb container for database
##
db:
  image: mariadb
  volumes:
    # Make database persistent
    - /var/lib/mysql
  environment:
    MYSQL_DATABASE: wordpress
    MYSQL_USER: wordpress
    MYSQL_PASSWORD: wordpress
    MYSQL_ROOT_PASSWORD: root

##
# Use elasticpress plugin and elasticsearch for quicker WP_Queries in WordPress
##
#elasticsearch:
  #image: elasticsearch
  #volumes:
    # Make elasticsearch persistent
    #- /usr/share/elasticsearch/data

##
# We use redis for wp object cache and php sessions
##
redis:
  image: redis

##
# Container for analyzing xdebug profiling
# For Example: use yoursite.test/?XDEBUG_PROFILE to profile the front page
##
webgrind:
  image: devgeniem/webgrind
  ports:
    - 80
  volumes_from:
    - web
  environment:
    VIRTUAL_HOST: webgrind.wordpress.test
