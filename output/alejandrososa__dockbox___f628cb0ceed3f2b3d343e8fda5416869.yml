version: '2'

services:

###
### APLICACIONES
###
    aplicaciones:
        image: tianon/true
        volumes:
            # Proyectos al mismo nivel de dockbox
            - ${APPLICATION}:/var/www


###
### SERVIDOR UBUNTU 16.04
###
    servidor:
        build:
            context: ./server
            dockerfile: "Dockerfile-${PHP_VERSION}"
            args:
                - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
                - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
                - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
                - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
                - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
                - INSTALL_SASS=${WORKSPACE_INSTALL_SASS}
                - INSTALL_V8JS_EXTENSION=${WORKSPACE_INSTALL_INSTALL_V8JS_EXTENSION}
                - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
                - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
                - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
                - INSTALL_MC=${WORKSPACE_INSTALL_MC}
                - PUID=${WORKSPACE_PUID}
                - PGID=${WORKSPACE_PGID}
                - NODE_VERSION=${WORKSPACE_NODE_VERSION}
                - YARN_VERSION=${WORKSPACE_YARN_VERSION}
                - TZ=${WORKSPACE_TIMEZONE}
        volumes_from:
            - aplicaciones
        extra_hosts:
            # IMPORTANT: Replace with your Docker Host IP (will be appended to /etc/hosts)
            # OBTENER CON: docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
            - "dockerhost:${DOCKER_HOST_IP}"
        ports:
            - "${WORKSPACE_SSH_PORT}:22"
        tty: true
        networks:
            - frontend
            - backend


###
### PHP
###
    php-fpm:
        build:
            context: ./php-fpm
            dockerfile: "Dockerfile-${PHP_VERSION}"
            args:
              - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
              - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
              - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
              - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
              - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
              - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
              - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
              - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
              - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
              - INSTALL_AEROSPIKE_EXTENSION=${PHP_FPM_INSTALL_AEROSPIKE_EXTENSION}
              - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
              - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
              - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
              - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        volumes_from:
            - aplicaciones
        volumes:
            - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        expose:
            - "9000"
        depends_on:
            - servidor
        extra_hosts:
            - "dockerhost:${DOCKER_HOST_IP}"
        environment:
            - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        networks:
            - backend


###
### NGINX
###
    nginx:
        build:
            context: ./nginx
            args:
                - PHP_UPSTREAM=php-fpm
        volumes_from:
            - aplicaciones
        volumes:
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        depends_on:
            - php-fpm
        networks:
            - frontend
            - backend


###
### APACHE
###
    apache2:
        build:
            context: ./apache2
            args:
                - PHP_SOCKET=${PHP_SOCKET}
        volumes_from:
            - aplicaciones
        volumes:
            - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
            - ./apache2/sites:/etc/apache2/sites-available
        ports:
            - "${APACHE_HOST_HTTP_PORT}:80"
            - "${APACHE_HOST_HTTPS_PORT}:443"
        depends_on:
            - php-fpm
        networks:
            - frontend
            - backend


###
### MYSQL
###
    mysql:
        build:
            context: ./mysql
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
        ports:
            - "${MYSQL_PORT}:3306"
        networks:
            - backend


###
### POSTGRESQL
###
    postgres:
        build: ./postgres
        volumes:
            - ${DATA_SAVE_PATH}/postgres/data:/var/lib/postgresql/data
            - ${DATA_SAVE_PATH}/postgres/backup:/var/lib/postgresql/backup
            - ${POSTGRES_LOG_PATH}:/var/log/postgresql
        ports:
            - "${POSTGRES_PORT}:5432"
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - backend


###
### POSTGRESQL PostGis
###
    postgres-postgis:
        build: ./postgres-postgis
        volumes:
            - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_PORT}:5432"
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - backend


###
### MONGODB
###
    mongo:
        build: ./mongo
        ports:
            - "27017:27017"
        volumes:
            - ${DATA_SAVE_PATH}/mongo:/data/db
            - ${DATA_SAVE_PATH}/mongo/configdb:/data/configdb
        networks:
            - backend


###
### PHPMYADMIN
###
    phpmyadmin:
        build: ./phpmyadmin
        environment:
            - PMA_ARBITRARY=1
            - MYSQL_USER=${PMA_USER}
            - MYSQL_PASSWORD=${PMA_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
        ports:
            - "${PMA_PORT}:80"
        depends_on:
            - "${PMA_DB_ENGINE}"
        networks:
            - frontend
            - backend


###
### PGADMIN
###
    pgadmin:
        build: ./pgadmin
        ports:
            - "5050:5050"
        links:
            - postgres
        networks:
            - frontend
            - backend


###
### REDIS
###
    redis:
        build: ./redis
        volumes:
            - ${DATA_SAVE_PATH}/redis:/data
        ports:
            - "6379:6379"
        networks:
            - backend


###
### JENKINS
###
    jenkins:
        build: ./jenkins
        environment:
            JAVA_OPTS: "-Djava.awt.headless=true"
        ports:
          - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
          - "${JENKINS_HOST_HTTP_PORT}:8080"
          - "${JENKINS_HOST_HTTPS_PORT}:8443"
        privileged: true
        volumes:
          - ${DATA_SAVE_PATH}/jenkins/jenkins_home:/var/jenkins_home
          - ${DATA_SAVE_PATH}/jenkins/docker.sock:/var/run/docker.sock
          - ${DATA_SAVE_PATH}/jenkins/docker:/usr/bin/docker


###
### RABBITMQ
###
    rabbitmq:
        build: ./rabbitmq
        ports:
            - "${RABBITMQ_NODE_HOST_PORT}:5672"
            - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
            - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
        privileged: true
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
        depends_on:
            - php-fpm
        networks:
            - backend


###
### NETWORK
###
networks:
    frontend:
        driver: "bridge"
    backend:
        driver: "bridge"


volumes:
    mysql:
        driver: "local"
    postgres:
        driver: "local"
    redis:
        driver: "local"
    mongo:
        driver: "local"
    phpmyadmin:
        driver: "local"
    sessions:    ## nothing is connected to this (- ./data/sessions:/sessions)
        driver: "local"
    jenkins:
        driver: "local"